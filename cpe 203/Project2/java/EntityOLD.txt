import java.util.List;
import processing.core.PImage;
import java.util.*;
import java.util.LinkedList;

final class Entity
{

   private static final Random rand = new Random();

   private static final String BLOB_KEY = "blob";
   private static final String BLOB_ID_SUFFIX = " -- blob";
   private static final int BLOB_PERIOD_SCALE = 4;
   private static final int BLOB_ANIMATION_MIN = 50;
   private static final int BLOB_ANIMATION_MAX = 150;

   private static final String ORE_ID_PREFIX = "ore -- ";
   private static final int ORE_CORRUPT_MIN = 20000;
   private static final int ORE_CORRUPT_MAX = 30000;
   private static final int ORE_REACH = 1;

   private static final String QUAKE_KEY = "quake";
   private static final String QUAKE_ID = "quake";
   private static final int QUAKE_ACTION_PERIOD = 1100;
   private static final int QUAKE_ANIMATION_PERIOD = 100;
   private static final int QUAKE_ANIMATION_REPEAT_COUNT = 10;

   private static final String ORE_KEY = "ore";

   // private EntityKind kind;
   // private String id;
   // private Point position;
   // private List<PImage> images;
   // private int imageIndex;
   // private int resourceLimit;
   // private int resourceCount;
   // private int actionPeriod;
   // private int animationPeriod;

   // public Entity(EntityKind kind, String id, Point position,
   //    List<PImage> images, int resourceLimit, int resourceCount,
   //    int actionPeriod, int animationPeriod)
   // {
   //    this.kind = kind;
   //    this.id = id;
   //    this.position = position;
   //    this.images = images;
   //    this.imageIndex = 0;
   //    this.resourceLimit = resourceLimit;
   //    this.resourceCount = resourceCount;
   //    this.actionPeriod = actionPeriod;
   //    this.animationPeriod = animationPeriod;
   // }

   // //1
   // public void executeMinerFullActivity(WorldModel world,
   //    ImageStore imageStore, EventScheduler scheduler)
   // {
   //    Optional<Entity> fullTarget = world.findNearest(this.position,
   //       EntityKind.BLACKSMITH);

   //    if (fullTarget.isPresent() &&
   //       moveToFull(world, fullTarget.get(), scheduler))
   //    {
   //       transformFull(world, scheduler, imageStore);
   //    }
   //    else
   //    {
   //       scheduler.scheduleEvent(this,
   //          Action.createActivityAction(this, world, imageStore),
   //          this.actionPeriod);
   //    }
   // }

   // //2
   // public void executeMinerNotFullActivity(WorldModel world, ImageStore imageStore, EventScheduler scheduler)
   // {
   //    Optional<Entity> notFullTarget = world.findNearest(this.position,
   //       EntityKind.ORE);

   //    if (!notFullTarget.isPresent() ||
   //       !moveToNotFull(world, notFullTarget.get(), scheduler) ||
   //       !transformNotFull(world, scheduler, imageStore))
   //    {
   //       scheduler.scheduleEvent(this,
   //          Action.createActivityAction(this, world, imageStore),
   //          this.actionPeriod);
   //    }
   // }

   // //3
   // public void executeOreActivity(WorldModel world,
   //    ImageStore imageStore, EventScheduler scheduler)
   // {
   //    Point pos = this.position;  // store current position before removing

   //    world.removeEntity(this);
   //    scheduler.unscheduleAllEvents(this);

   //    Entity blob = pos.createOreBlob(this.id + BLOB_ID_SUFFIX,
   //       this.actionPeriod / BLOB_PERIOD_SCALE,
   //       BLOB_ANIMATION_MIN +
   //          rand.nextInt(BLOB_ANIMATION_MAX - BLOB_ANIMATION_MIN),
   //       imageStore.getImageList(BLOB_KEY));

   //    world.addEntity(blob);
   //    blob.scheduleActions(scheduler, world, imageStore);
   // }

   // //4
   // public void executeOreBlobActivity(WorldModel world,
   //    ImageStore imageStore, EventScheduler scheduler)
   // {
   //    Optional<Entity> blobTarget = world.findNearest(this.position, EntityKind.VEIN);
   //    long nextPeriod = this.actionPeriod;

   //    if (blobTarget.isPresent())
   //    {
   //       Point tgtPos = blobTarget.get().position;

   //       if (moveToOreBlob(world, blobTarget.get(), scheduler))
   //       {
   //          Entity quake = tgtPos.createQuake(imageStore.getImageList(QUAKE_KEY));

   //          world.addEntity(quake);
   //          nextPeriod += this.actionPeriod;
   //          quake.scheduleActions(scheduler, world, imageStore);
   //       }
   //    }

   //    scheduler.scheduleEvent(this,
   //       Action.createActivityAction(this, world, imageStore),
   //       nextPeriod);
   // }

   // //5
   // public void executeQuakeActivity(WorldModel world,
   //    ImageStore imageStore, EventScheduler scheduler)
   // {
   //    scheduler.unscheduleAllEvents(this);
   //    world.removeEntity(this);
   // }

   // //6
   // public void executeVeinActivity(WorldModel world,
   //    ImageStore imageStore, EventScheduler scheduler)
   // {
   //    Optional<Point> openPt = world.findOpenAround(this.position);

   //    if (openPt.isPresent())
   //    {
   //       Entity ore = openPt.get().createOre(ORE_ID_PREFIX + this.id, ORE_CORRUPT_MIN +
   //             rand.nextInt(ORE_CORRUPT_MAX - ORE_CORRUPT_MIN),
   //          imageStore.getImageList(ORE_KEY));
   //       world.addEntity(ore);
   //       ore.scheduleActions(scheduler, world, imageStore);
   //    }

   //    scheduler.scheduleEvent(this,
   //       Action.createActivityAction(this, world, imageStore),
   //       this.actionPeriod);
   // }

   // //7
   // public void scheduleActions(EventScheduler scheduler,
   //    WorldModel world, ImageStore imageStore)
   // {
   //    switch (this.kind)
   //    {
   //    case MINER_FULL:
   //       scheduler.scheduleEvent(this,
   //          Action.createActivityAction(this, world, imageStore),
   //          this.actionPeriod);
   //       scheduler.scheduleEvent(this, Action.createAnimationAction(this, 0),
   //       this.getAnimationPeriod());
   //       break;

   //    case MINER_NOT_FULL:
   //       scheduler.scheduleEvent(this,
   //          Action.createActivityAction(this, world, imageStore),
   //          this.actionPeriod);
   //       scheduler.scheduleEvent(this,
   //          Action.createAnimationAction(this, 0), this.getAnimationPeriod());
   //       break;

   //    case ORE:
   //       scheduler.scheduleEvent(this,
   //          Action.createActivityAction(this, world, imageStore),
   //          this.actionPeriod);
   //       break;

   //    case ORE_BLOB:
   //       scheduler.scheduleEvent(this,
   //          Action.createActivityAction(this, world, imageStore),
   //          this.actionPeriod);
   //       scheduler.scheduleEvent(this,
   //          Action.createAnimationAction(this, 0), this.getAnimationPeriod());
   //       break;

   //    case QUAKE:
   //       scheduler.scheduleEvent(this,
   //          Action.createActivityAction(this, world, imageStore),
   //          this.actionPeriod);
   //       scheduler.scheduleEvent(this,
   //          Action.createAnimationAction(this, QUAKE_ANIMATION_REPEAT_COUNT),
   //          this.getAnimationPeriod());
   //       break;

   //    case VEIN:
   //       scheduler.scheduleEvent(this,
   //          Action.createActivityAction(this, world, imageStore),
   //          this.actionPeriod);
   //       break;

   //    default:
   //    }
   // }

   // //8
   // public boolean transformNotFull(WorldModel world,
   //    EventScheduler scheduler, ImageStore imageStore)
   // {
   //    if (this.resourceCount >= this.resourceLimit)
   //    {
   //       Entity miner = this.position.createMinerFull(this.id, this.resourceLimit,
   //          this.actionPeriod, this.animationPeriod,
   //          this.images);

   //       world.removeEntity(this);
   //       scheduler.unscheduleAllEvents(this);

   //       world.addEntity(miner);
   //       miner.scheduleActions(scheduler, world, imageStore);

   //       return true;
   //    }

   //    return false;
   // }

   // //9
   // public void transformFull(WorldModel world,
   //    EventScheduler scheduler, ImageStore imageStore)
   // {
   //    Entity miner = this.position.createMinerNotFull(this.id, this.resourceLimit,
   //       this.actionPeriod, this.animationPeriod,
   //       this.images);

   //    world.removeEntity(this);
   //    scheduler.unscheduleAllEvents(this);

   //    world.addEntity(miner);
   //    miner.scheduleActions(scheduler, world, imageStore);
   // }

   // //10
   // public boolean moveToNotFull(WorldModel world,
   //    Entity target, EventScheduler scheduler)
   // {
   //    if (this.position.adjacent(target.position))
   //    {
   //       this.resourceCount += 1;
   //       world.removeEntity(target);
   //       scheduler.unscheduleAllEvents(target);

   //       return true;
   //    }
   //    else
   //    {
   //       Point nextPos = this.nextPositionMiner(world, target.position);

   //       if (!this.position.equals(nextPos))
   //       {
   //          Optional<Entity> occupant = world.getOccupant(nextPos);
   //          if (occupant.isPresent())
   //          {
   //             scheduler.unscheduleAllEvents(occupant.get());
   //          }

   //          world.moveEntity(this, nextPos);
   //       }
   //       return false;
   //    }
   // }

   // //11
   // public boolean moveToFull(WorldModel world,
   //    Entity target, EventScheduler scheduler)
   // {
   //    if (this.position.adjacent(target.position))
   //    {
   //       return true;
   //    }
   //    else
   //    {
   //       Point nextPos = this.nextPositionMiner(world, target.position);

   //       if (!this.position.equals(nextPos))
   //       {
   //          Optional<Entity> occupant = world.getOccupant(nextPos);
   //          if (occupant.isPresent())
   //          {
   //             scheduler.unscheduleAllEvents(occupant.get());
   //          }

   //          world.moveEntity(this, nextPos);
   //       }
   //       return false;
   //    }
   // }

   // //12
   // public boolean moveToOreBlob(WorldModel world,
   //    Entity target, EventScheduler scheduler)
   // {
   //    if (this.position.adjacent(target.position))
   //    {
   //       world.removeEntity(target);
   //       scheduler.unscheduleAllEvents(target);
   //       return true;
   //    }
   //    else
   //    {
   //       Point nextPos = this.nextPositionOreBlob(world, target.position);

   //       if (!this.position.equals(nextPos))
   //       {
   //          Optional<Entity> occupant = world.getOccupant(nextPos);
   //          if (occupant.isPresent())
   //          {
   //             scheduler.unscheduleAllEvents(occupant.get());
   //          }

   //          world.moveEntity(this, nextPos);
   //       }
   //       return false;
   //    }
   // }


   // //13
   // public Point nextPositionMiner(WorldModel world,
   //    Point destPos)
   // {
   //    int horiz = Integer.signum(destPos.getX() - this.position.getX());
   //    Point newPos = new Point(this.position.getX() + horiz,
   //       this.position.getY());

   //    if (horiz == 0 || world.isOccupied(newPos))
   //    {
   //       int vert = Integer.signum(destPos.getY() - this.position.getY());
   //       newPos = new Point(this.position.getX(),
   //          this.position.getY() + vert);

   //       if (vert == 0 || world.isOccupied(newPos))
   //       {
   //          newPos = this.position;
   //       }
   //    }

   //    return newPos;
   // }

   // //14
   // public Point nextPositionOreBlob(WorldModel world,
   //    Point destPos)
   // {
   //    int horiz = Integer.signum(destPos.getX() - this.position.getX());
   //    Point newPos = new Point(this.position.getX() + horiz,
   //       this.position.getY());

   //    Optional<Entity> occupant = world.getOccupant(newPos);

   //    if (horiz == 0 ||
   //       (occupant.isPresent() && !(occupant.get().kind == EntityKind.ORE)))
   //    {
   //       int vert = Integer.signum(destPos.getY() - this.position.getY());
   //       newPos = new Point(this.position.getX(), this.position.getY() + vert);
   //       occupant = world.getOccupant(newPos);

   //       if (vert == 0 ||
   //          (occupant.isPresent() && !(occupant.get().kind == EntityKind.ORE)))
   //       {
   //          newPos = this.position;
   //       }
   //    }

   //    return newPos;
   // }

   // //15
   // public static Optional<Entity> nearestEntity(List<Entity> entities,
   //    Point pos)
   // {
   //    if (entities.isEmpty())
   //    {
   //       return Optional.empty();
   //    }
   //    else
   //    {
   //       Entity nearest = entities.get(0);
   //       int nearestDistance = nearest.position.distanceSquared(pos);

   //       for (Entity other : entities)
   //       {
   //          int otherDistance = other.position.distanceSquared(pos);

   //          if (otherDistance < nearestDistance)
   //          {
   //             nearest = other;
   //             nearestDistance = otherDistance;
   //          }
   //       }

   //       return Optional.of(nearest);
   //    }
   // }

   // //16
   // public int getAnimationPeriod()
   // {
   //    switch (this.kind)
   //    {
   //    case MINER_FULL:
   //    case MINER_NOT_FULL:
   //    case ORE_BLOB:
   //    case QUAKE:
   //       return this.animationPeriod;
   //    default:
   //       throw new UnsupportedOperationException(
   //          String.format("getAnimationPeriod not supported for %s",
   //          this.kind));
   //    }
   // }

   // //17
   // public void nextImage()
   // {
   //    this.imageIndex = (this.imageIndex + 1) % this.images.size();
   // }


   // //Getters
   // public EntityKind getKind() { return kind; }
   // public String getid() { return id; }
   // public Point getposition() { return position; }
   // public List<PImage> getimages() { return images; }
   // public int getImageIndex() { return imageIndex; }
   // public int getresourceLimit() { return resourceLimit; }
   // public int getresourceCount() { return resourceCount; }
   // public int getactionPeriod() { return actionPeriod; }
   // public int getanimationPeriod() { return animationPeriod; }

   // public void setposition(Point point){
   //    position = point;
   // }

}
