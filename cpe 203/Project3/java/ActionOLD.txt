class Action
{

   // private ActionKind kind;
   // private Entity entity;
   // private WorldModel world;
   // private ImageStore imageStore;
   // private int repeatCount;

   // public Action(ActionKind kind, Entity entity, WorldModel world,
   //    ImageStore imageStore, int repeatCount)
   // {
   //    this.kind = kind;
   //    this.entity = entity;
   //    this.world = world;
   //    this.imageStore = imageStore;
   //    this.repeatCount = repeatCount;
   // }

   // //1
   // public void executeAction(EventScheduler scheduler)
   // {
   //    switch (this.kind)
   //    {
   //    case ACTIVITY:
   //       executeActivityAction(scheduler);
   //       break;

   //    case ANIMATION:
   //       executeAnimationAction(scheduler);
   //       break;
   //    }
   // }

   // //2
   // public void executeAnimationAction(EventScheduler scheduler)
   // {
   //    this.entity.nextImage();

   //    if (this.repeatCount != 1)
   //    {
   //       scheduler.scheduleEvent(this.entity,
   //          createAnimationAction(this.entity,
   //             Math.max(this.repeatCount - 1, 0)),
   //          this.entity.getAnimationPeriod());
   //    }
   // }

   //3
   public void executeActivityAction(EventScheduler scheduler)
   {
      switch (entity.getKind())
      {
      case MINER_FULL:
         entity.executeMinerFullActivity(this.world,
            this.imageStore, scheduler);
         break;

      case MINER_NOT_FULL:
         entity.executeMinerNotFullActivity(this.world,
            this.imageStore, scheduler);
         break;

      case ORE:
         entity.executeOreActivity(this.world, this.imageStore,
            scheduler);
         break;

      case ORE_BLOB:
         entity.executeOreBlobActivity(this.world,
            this.imageStore, scheduler);
         break;

      case QUAKE:
         entity.executeQuakeActivity(this.world, this.imageStore,
            scheduler);
         break;

      case VEIN:
         entity.executeVeinActivity(this.world, this.imageStore,
            scheduler);
         break;

      default:
         throw new UnsupportedOperationException(
            String.format("executeActivityAction not supported for %s",
            this.entity.getKind()));
      }
   }

   // //4
   // public static Action createAnimationAction(Entity entity, int repeatCount)
   // {
   //    return new Action(ActionKind.ANIMATION, entity, null, null, repeatCount);
   // }

   // //5
   // public static Action createActivityAction(Entity entity, WorldModel world,
   //    ImageStore imageStore)
   // {
   //    return new Action(ActionKind.ACTIVITY, entity, world, imageStore, 0);
   // }

}
